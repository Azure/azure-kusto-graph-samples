let nodes = datatable(EntityId:string, Action:string, TimeStamp:datetime, TenantId:string, EntityType:string, FriendlyName:string, Labels:dynamic)
[
    "Group;Dev;Contoso", "Create", datetime(2024-10-21), "Contoso", "Group", "Dev", dynamic([]),
    "Group;Ops;Contoso", "Create", datetime(2024-10-21), "Contoso", "Group", "Ops", dynamic([]),
    "User;Alice;Contoso", "Create", datetime(2024-10-21), "Contoso", "User", "Alice", dynamic([]),
    "User;Bob;Contoso", "Create", datetime(2024-10-21), "Contoso", "User", "Bob", dynamic([]),
    "ManagementGroup;MG1;Contoso", "Create", datetime(2024-10-21), "Contoso", "ManagementGroup", "MG1", dynamic([]),
    "Subscription;Sub1;Contoso", "Create", datetime(2024-10-21), "Contoso", "Subscription", "Sub1", dynamic([]),
    "Subscription;Sub2;Contoso", "Create", datetime(2024-10-21), "Contoso", "Subscription", "Sub2", dynamic([]),
    "ResourceGroup;RG1;Contoso", "Create", datetime(2024-10-21), "Contoso", "ResourceGroup", "RG1", dynamic([]),
    "ResourceGroup;RG2;Contoso", "Create", datetime(2024-10-21), "Contoso", "ResourceGroup", "RG2", dynamic([]),
    "VirtualMachine;VM1;Contoso", "Create", datetime(2024-10-21), "Contoso", "VirtualMachine", "VM1", dynamic([]),
    "VirtualMachine;VM2;Contoso", "Create", datetime(2024-10-21), "Contoso", "VirtualMachine", "VM2", dynamic([])
];
let edges = datatable(Action:string, TimeStamp:datetime, TenantId:string, EdgeType:string, Labels:dynamic, Source:string, Target:string)
[
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Group;Dev;Contoso", "Group;Ops;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Group;Ops;Contoso", "User;Alice;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Group;Dev;Contoso", "User;Bob;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ManagementGroup;MG1;Contoso", "Subscription;Sub1;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ManagementGroup;MG1;Contoso", "Subscription;Sub2;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Subscription;Sub1;Contoso", "ResourceGroup;RG1;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Subscription;Sub2;Contoso", "ResourceGroup;RG2;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ResourceGroup;RG1;Contoso", "VirtualMachine;VM1;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ResourceGroup;RG2;Contoso", "VirtualMachine;VM2;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "authorized_on", dynamic(["Reader"]), "Group;Dev;Contoso", "ManagementGroup;MG1;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "authorized_on", dynamic(["Owner"]), "Group;Ops;Contoso", "Subscription;Sub2;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "authorized_on", dynamic(["Reader"]), "User;Bob;Contoso", "VirtualMachine;VM1;Contoso",
];
edges
| make-graph Source --> Target with nodes on EntityId

.execute script <|
.create-merge table nodeEvents (Action:string, TimeStamp:datetime, TenantId:string, NodeType:string, NodeId:string, Labels:dynamic) with (folder = "", docstring = "") 
//.create-merge table edgeEvents (Action:string, TimeStamp:datetime, TenantId:string, EdgeType:string, Labels:dynamic, Source:string, Target:string) with (folder = "", docstring = "")  
.create-merge table nodePropertyEvents (NodeId:string, Action:string, TimeStamp:datetime, TenantId:string, NodeType:string, PropertyName:string, PropertyValue:dynamic) with (folder = "", docstring = "")  
.create-merge table edgePropertyEvents (TimeStamp:datetime, Source:string, Target:string, TenantId:string, EdgeType:string, Action:string, PropertyName:string, PropertyValue:dynamic) with (folder = "", docstring = "")  
.drop extents from all
.set-or-append nodeEvents <| 
datatable(Action:string, TimeStamp:datetime, TenantId:string, NodeType:string, FriendlyName:string, Labels:dynamic)
[
    "Create", datetime(2024-10-21), "Contoso", "Group", "Dev", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "Group", "Ops", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "User", "Alice", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "User", "Bob", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "ManagementGroup", "MG1", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "Subscription", "Sub1", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "Subscription", "Sub2", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "ResourceGroup", "RG1", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "ResourceGroup", "RG2", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "VirtualMachine", "VM1", dynamic([]),
    "Create", datetime(2024-10-21), "Contoso", "VirtualMachine", "VM2", dynamic([])
]
.set-or-append edgeEvents <|
 datatable(Action:string, TimeStamp:datetime, TenantId:string, EdgeType:string, Labels:dynamic, Source:string, Target:string)
[
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Group;Dev;Contoso", "Group;Ops;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Group;Ops;Contoso", "User;Alice;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Group;Dev;Contoso", "User;Bob;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ManagementGroup;MG1;Contoso", "Subscription;Sub1;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ManagementGroup;MG1;Contoso", "Subscription;Sub2;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Subscription;Sub1;Contoso", "ResourceGroup;RG1;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Subscription;Sub2;Contoso", "ResourceGroup;RG2;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ResourceGroup;RG1;Contoso", "VirtualMachine;VM1;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ResourceGroup;RG2;Contoso", "VirtualMachine;VM2;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "authorized_on", dynamic(["Reader"]), "Group;Dev;Contoso", "ManagementGroup;MG1;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "authorized_on", dynamic(["Owner"]), "Group;Ops;Contoso", "Subscription;Sub2;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "authorized_on", dynamic(["Reader"]), "User;Bob;Contoso", "VirtualMachine;VM1;Contoso",
]
.set-or-append nodePropertyEvents <|
datatable(NodeId:string, Action:string, TimeStamp:datetime, TenantId:string, NodeType:string, PropertyName:string, PropertyValue:dynamic)
[
    "User;Alice;Contoso", "Add", datetime(2024-10-21), "Contoso", "User", "Age", dynamic(42),
    "User;Alice;Contoso", "Add", datetime(2024-10-21), "Contoso", "User", "Location", dynamic("UK"),
    "User;Bob;Contoso", "Add", datetime(2024-10-21), "Contoso", "User", "Location", dynamic("Germany"),
    "VirtualMachine;VM1;Contoso", "Add", datetime(2024-10-21), "Contoso", "User", "Region", dynamic("UK South"),
    "VirtualMachine;VM2;Contoso", "Add", datetime(2024-10-21), "Contoso", "User", "Region", dynamic("West Europe"),
    "ResourceGroup;RG2;Contoso", "Add", datetime(2024-10-21), "Contoso", "User", "Region", dynamic("West Europe"),
    "ResourceGroup;RG1;Contoso", "Add", datetime(2024-10-21), "Contoso", "User", "Region", dynamic("UK South"),
]
.set-or-append edgePropertyEvents <|
datatable(TimeStamp:datetime, Source:string, Target:string, TenantId:string, EdgeType:string, Action:string, PropertyName:string, PropertyValue:dynamic)
[
    datetime(2024-10-21),"User;Bob;Contoso", "VirtualMachine;VM1;Contoso", "Contoso", "authorized_on", "Add", "LocationFilter", dynamic(["UK"]), 
]


.create-or-alter materialized-view edgeEventsLKV on table edgeEvents {
edgeEvents
| summarize arg_max(TimeStamp, *) by Source, Target, TenantId, EdgeType
}

.create-or-alter  materialized-view nodeEventsLKV on table nodeEvents {
nodeEvents
| summarize arg_max(TimeStamp, *) by NodeId, TenantId, NodeType
}

edgePropertyEvents
| summarize arg_max(TimeStamp, *) by Source, Target, TenantId, EdgeType, PropertyName

AdtEdgePropertyEventsDedup

.drop table edgePropertyEvents

// [NOTE!] the materialized view will be created with no `backfill`
.create  materialized-view  AdtEdgePropertyEventsDedup on table AdtPropertyEvents { AdtPropertyEvents
    | where isnotempty(RelationshipId)
    | project-away Id, ModelId
    | summarize arg_max(TimeStamp, *) by RelationshipId, Key } 
    
    
    

//nodes
.execute script <|
.create-merge table nodeEvents (Action:string, TimeStamp:datetime, TenantId:string, NodeType:string, NodeId:string, Labels:dynamic) with (folder = "Bronze", docstring = "Landing table nodes")  
.alter table nodeEvents policy streamingingestion enable 
.alter-merge table nodeEvents policy retention softdelete = 0d recoverability = disabled
.create function ifnotexists with (folder="Update") Update_NodeEvents () {
    nodeEvents
    | extend FQDN = strcat_delim("-", TenantId, NodeType, NodeId)
}
.create-merge table nodeEventsSilver (Action:string, TimeStamp:datetime, TenantId:string, NodeType:string, NodeId:string, Labels:dynamic, FQDN:string) with (folder = "Silver", docstring = "Enriched data of nodes")  
.alter table nodeEventsSilver policy update
```
[
    {
        "IsEnabled": true,
        "Source": "nodeEvents",
        "Query": "Update_NodeEvents",
        "IsTransactional": true,
        "PropagateIngestionProperties": false
    }
]
```
.create  materialized-view  nodeEventsLKV on table nodeEventsSilver { nodeEventsSilver
| summarize arg_max(TimeStamp, *) by FQDN }
.set-or-replace nodeEvents <|
datatable(Action:string, TimeStamp:datetime, TenantId:string, NodeType:string, NodeId:string, Labels:dynamic)
[
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "Group", "Dev", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "Group", "Ops", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "User", "Alice", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "User", "Bob", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "ManagementGroup", "MG1", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "Subscription", "Sub1", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "Subscription", "Sub2", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "ResourceGroup", "RG1", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "ResourceGroup", "RG2", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "VirtualMachine", "VM1", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "VirtualMachine", "VM2", dynamic([]), 
]
.create function ifnotexists with (folder="Consumption") nodeEventsGold () {
    nodeEventsLKV
    | where Action != "Delete"
}

//edges
.execute script <|
.create-merge table edgeEvents (Action:string, TimeStamp:datetime, TenantId:string, EdgeType:string, SourceTenantId:string, SourceNodeType:string, SourceNodeId:string, TargetTenantId:string, TargetNodeType:string, TargetNodeId:string, Labels:dynamic) with (folder = "Bronze", docstring = "Landing table edges")  
.alter table edgeEvents policy streamingingestion enable 
.alter-merge table edgeEvents policy retention softdelete = 0d recoverability = disabled
.create function ifnotexists with (folder="Update") Update_EdgeEvents () {
edgeEvents
| extend SourceFQDN = strcat_delim("-", SourceTenantId, SourceNodeType, SourceNodeId), TargetFQDN = strcat_delim("-", TargetTenantId, TargetNodeType, TargetNodeId)
| extend FQDN = strcat_delim("#",SourceFQDN, TargetFQDN, TenantId, EdgeType)
}
.create-merge table edgeEventsSilver (Action:string, TimeStamp:datetime, TenantId:string, EdgeType:string, SourceTenantId:string, SourceNodeType:string, SourceNodeId:string, TargetTenantId:string, TargetNodeType:string, TargetNodeId:string, Labels:dynamic, SourceFQDN:string, TargetFQDN:string, FQDN:string) with (folder = "Silver", docstring = "Enriched data of edges") 
.alter table edgeEventsSilver policy update
```
[
    {
        "IsEnabled": true,
        "Source": "edgeEvents",
        "Query": "Update_EdgeEvents",
        "IsTransactional": true,
        "PropagateIngestionProperties": false
    }
]
```
.create  materialized-view  edgeEventsLKV on table edgeEventsSilver { edgeEventsSilver
| summarize arg_max(TimeStamp, *) by FQDN }
.set-or-replace edgeEvents <|
datatable(Action:string, TimeStamp:datetime, TenantId:string, EdgeType:string, SourceTenantId:string, SourceNodeType:string, SourceNodeId:string, TargetTenantId:string, TargetNodeType:string, TargetNodeId:string, Labels:dynamic)
[
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "contains", "Contoso", "Group", "Dev", "Contoso", "Group", "Ops", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "contains", "Contoso", "Group", "Ops", "Contoso", "User", "Alice", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "contains", "Contoso", "Group", "Dev", "Contoso", "User", "Bob", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "contains", "Contoso", "ManagementGroup", "MG1", "Contoso", "Subscription", "Sub1", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "contains", "Contoso", "ManagementGroup", "MG1", "Contoso", "Subscription", "Sub2", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "contains", "Contoso", "Subscription", "Sub1", "Contoso", "ResourceGroup", "RG1", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "contains", "Contoso", "Subscription", "Sub2", "Contoso", "ResourceGroup", "RG2", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "contains", "Contoso", "ResourceGroup", "RG1", "Contoso", "VirtualMachine", "VM1", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "contains", "Contoso", "ResourceGroup", "RG2", "Contoso", "VirtualMachine", "VM2", dynamic([]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "authorized_on", "Contoso", "Group", "Dev", "Contoso", "ManagementGroup", "MG1", dynamic(["Reader"]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "authorized_on", "Contoso", "Group", "Ops", "Contoso", "Subscription", "Sub2", dynamic(["Owner"]), 
    "Create", datetime(2024-10-21T00:00:00.0000000Z), "Contoso", "authorized_on", "Contoso", "User", "Bob", "Contoso", "VirtualMachine", "VM1", dynamic(["Reader"]), 
]
.create function ifnotexists with (folder="Consumption") edgeEventsGold () {
    edgeEventsLKV
    | where Action != "Delete"
}


edgeEventsGold
| make-graph SourceFQDN --> TargetFQDN with nodeEventsGold on FQDN


.drop function Update_EdgeEvents

.drop materialized-view edgeEventsLKV

.drop table edgeEventsSilver

.drop table edgeEventsNew

.drop table edgeEvents


edgeEventsNew

.create function ifnotexists with (folder="Update") Update_EdgeEvents () {
edgeEventsNew
| extend SourceFQDN = strcat_delim("-", SourceTenantId, SourceNodeType, SourceNodeId), TargetFQDN = strcat_delim("-", TargetTenantId, TargetNodeType, TargetNodeId)
| extend FQDN = strcat_delim("#",SourceFQDN, TargetFQDN, TenantId, EdgeType)
}

.set-or-append edgeEventsSilver <| Update_EdgeEvents

edgeEventsSilver

.create-merge table edgeEventsSilver (Action:string, TimeStamp:datetime, TenantId:string, EdgeType:string, SourceTenantId:string, SourceNodeType:string, SourceNodeId:string, TargetTenantId:string, TargetNodeType:string, TargetNodeId:string, Labels:dynamic, SourceFQDN:string, TargetFQDN:string, FQDN:string) with (folder = "", docstring = "")  


edgeEventsNew
| extend SourceFQDN = strcat_delim("-", SourceTenantId, SourceNodeType, SourceNodeId), TargetFQDN = strcat_delim("-", TargetTenantId, TargetNodeType, TargetNodeId)
| extend FQDN = strcat_delim("#",SourceFQDN, TargetFQDN, TenantId, EdgeType)


nodeEventsGold

.drop table nodeEventsSilver

.drop function Update_NodeEvents

.drop materialized-view nodeEventsLKV


nodeEventsNew
| distinct Action, TimeStamp, TenantId, NodeType, NodeId
| extend Labels = dynamic([]);

    
.set-or-append nodeEventsNew <|
nodeEvents
| extend NodeId = tostring(split(NodeId,';')[1])
| project-away FriendlyName
| project-reorder Action, TimeStamp, TenantId, NodeType, NodeId, Labels

.alter table nodeEventsNew policy streamingingestion enable 

.create function ifnotexists Update_NodeEvents () {
    nodeEventsNew
    | extend FQDN = strcat_delim("-", TenantId, NodeType, NodeId)
}

.set-or-append nodeEventsNewSilver <|
Update_NodeEvents

.alter table nodeEventsNewSilver policy update
```
[
    {
        "IsEnabled": true,
        "Source": "nodeEventsNew",
        "Query": "Update_NodeEvents",
        "IsTransactional": true,
        "PropagateIngestionProperties": false
    }
]
```


.create  materialized-view  nodeEventsLKVNew on table nodeEventsNewSilver { nodeEventsNewSilver
| summarize arg_max(TimeStamp, *) by FQDN } 

.drop materialized-view nodeEventsLKV

.drop table nodeEvents


//edges

.set-or-append edgeEventsNew <|
datatable(Action:string, TimeStamp:datetime, TenantId:string, EdgeType:string, Labels:dynamic, Source:string, Target:string)
[
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Group;Dev;Contoso", "Group;Ops;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Group;Ops;Contoso", "User;Alice;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Group;Dev;Contoso", "User;Bob;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ManagementGroup;MG1;Contoso", "Subscription;Sub1;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ManagementGroup;MG1;Contoso", "Subscription;Sub2;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Subscription;Sub1;Contoso", "ResourceGroup;RG1;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "Subscription;Sub2;Contoso", "ResourceGroup;RG2;Contoso", 
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ResourceGroup;RG1;Contoso", "VirtualMachine;VM1;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "contains", dynamic([]), "ResourceGroup;RG2;Contoso", "VirtualMachine;VM2;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "authorized_on", dynamic(["Reader"]), "Group;Dev;Contoso", "ManagementGroup;MG1;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "authorized_on", dynamic(["Owner"]), "Group;Ops;Contoso", "Subscription;Sub2;Contoso",
    "Create", datetime(2024-10-21), "Contoso", "authorized_on", dynamic(["Reader"]), "User;Bob;Contoso", "VirtualMachine;VM1;Contoso",
]
| extend Source=split(Source,';'), Target=split(Target,';')
| extend SourceTenantId = tostring(Source[2]), SourceNodeType = tostring(Source[0]), SourceNodeId = tostring(Source[1])
| extend TargetTenantId = tostring(Target[2]), TargetNodeType = tostring(Target[0]), TargetNodeId = tostring(Target[1])
| project Action, TimeStamp, TenantId, EdgeType, SourceTenantId, SourceNodeType, SourceNodeId, TargetTenantId, TargetNodeType, TargetNodeId, Labels