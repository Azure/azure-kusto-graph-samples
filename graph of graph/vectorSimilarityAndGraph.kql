let IdentityNodes = datatable(id:string, type:string, department:string, privilegeLevel:string)
[
  "User001", "Employee", "Finance", "Standard",
  "User002", "Employee", "IT", "Admin",
  "User003", "Employee", "HR", "Standard",
  "Group001", "SecurityGroup", "Finance", "Finance-Access",
  "Group002", "SecurityGroup", "IT", "Admin-Access",
  "Resource001", "Database", "Finance", "Restricted"
];
let IdentityEdges = datatable(source:string, target:string, relationshipType:string)
[
  "User001", "Group001", "memberOf",
  "User002", "Group002", "memberOf",
  "Group001", "Resource001", "canAccess",
  "Group002", "Resource001", "canAdminister"
];
let IdentityGraph = IdentityEdges
| make-graph source --> target with IdentityNodes on id;
// Define embeddings for user behaviors (as if from an ML model)
let UserBehaviorEmbeddings = datatable(userId:string, behaviorEmbedding:dynamic)
[
  "User001", dynamic([0.2, 0.5, 0.1, 0.8, 0.3]),
  "User002", dynamic([0.25, 0.48, 0.15, 0.82, 0.28]), // Similar to User001
  "User003", dynamic([0.7, 0.2, 0.6, 0.1, 0.9]),      // Different pattern
  "User004", dynamic([0.72, 0.19, 0.58, 0.12, 0.88]), // Similar to User003
  "User005", dynamic([0.22, 0.51, 0.12, 0.79, 0.31])  // Similar to User001
];
// Calculate cosine similarity between users' behavior patterns
let SimilarityScores = UserBehaviorEmbeddings
| extend vector1 = behaviorEmbedding, dummy=1
| join kind=inner (
    UserBehaviorEmbeddings
    | extend vector2 = behaviorEmbedding, dummy=1
) on dummy // Cross join
| where userId != userId1
| extend similarity = series_cosine_similarity(vector1, vector2)
| project User1 = userId, User2 = userId1, CosineSimilarity = similarity;
// Find users with similar behavior patterns but different access levels
let SimilarUsersWithDifferentAccess = SimilarityScores
| where CosineSimilarity > 0.95
| join kind=inner (
    IdentityNodes
    | project userId = id, department, privilegeLevel 
) on $left.User1 == $right.userId
| join kind=inner (
    IdentityNodes
    | project userId = id, department2 = department, privilegeLevel2 = privilegeLevel
) on $left.User2 == $right.userId
| where privilegeLevel != privilegeLevel2
| project User1 = userId, User2, Similarity = CosineSimilarity, 
         Department1 = department, PrivilegeLevel1 = privilegeLevel,
         Department2 = department2, PrivilegeLevel2 = privilegeLevel2;
// Use identity graph to find potentially excessive privileges
IdentityGraph
| graph-match (u1)-[access1*1..3]->(resource)<-[access2*1..3]-(u2)
    where strcat(u1.id, u2.id) in (
        SimilarUsersWithDifferentAccess
        | project pair = strcat(User1, User2)
    )
    and u1.privilegeLevel != "Admin" and u2.privilegeLevel == "Admin"
    project 
        StandardUser = u1.id,
        SimilarAdminUser = u2.id,
        ResourceWithSharedAccess = resource.id,
        RecommendedAction = "Review privilege levels - potential excessive permissions"
| lookup kind=inner 
    SimilarUsersWithDifferentAccess on 
        $left.StandardUser == $right.User1 and
        $left.SimilarAdminUser == $right.User2
| project StandardUser, SimilarAdminUser, ResourceWithSharedAccess, RecommendedAction, Similarity
